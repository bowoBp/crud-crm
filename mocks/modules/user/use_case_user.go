// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	entity "crud/entity"
	user "crud/modules/user"

	mock "github.com/stretchr/testify/mock"
)

// UseCaseUser is an autogenerated mock type for the UseCaseUser type
type UseCaseUser struct {
	mock.Mock
}

type UseCaseUser_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCaseUser) EXPECT() *UseCaseUser_Expecter {
	return &UseCaseUser_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: _a0
func (_m *UseCaseUser) CreateUser(_a0 user.UserParam) (entity.User, error) {
	ret := _m.Called(_a0)

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.UserParam) (entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.UserParam) entity.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(user.UserParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseUser_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UseCaseUser_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 user.UserParam
func (_e *UseCaseUser_Expecter) CreateUser(_a0 interface{}) *UseCaseUser_CreateUser_Call {
	return &UseCaseUser_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0)}
}

func (_c *UseCaseUser_CreateUser_Call) Run(run func(_a0 user.UserParam)) *UseCaseUser_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.UserParam))
	})
	return _c
}

func (_c *UseCaseUser_CreateUser_Call) Return(_a0 entity.User, _a1 error) *UseCaseUser_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseUser_CreateUser_Call) RunAndReturn(run func(user.UserParam) (entity.User, error)) *UseCaseUser_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: email
func (_m *UseCaseUser) DeleteUser(email string) (interface{}, error) {
	ret := _m.Called(email)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseUser_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UseCaseUser_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - email string
func (_e *UseCaseUser_Expecter) DeleteUser(email interface{}) *UseCaseUser_DeleteUser_Call {
	return &UseCaseUser_DeleteUser_Call{Call: _e.mock.On("DeleteUser", email)}
}

func (_c *UseCaseUser_DeleteUser_Call) Run(run func(email string)) *UseCaseUser_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UseCaseUser_DeleteUser_Call) Return(_a0 interface{}, _a1 error) *UseCaseUser_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseUser_DeleteUser_Call) RunAndReturn(run func(string) (interface{}, error)) *UseCaseUser_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: id
func (_m *UseCaseUser) GetUserById(id uint) (entity.User, error) {
	ret := _m.Called(id)

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseUser_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type UseCaseUser_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - id uint
func (_e *UseCaseUser_Expecter) GetUserById(id interface{}) *UseCaseUser_GetUserById_Call {
	return &UseCaseUser_GetUserById_Call{Call: _e.mock.On("GetUserById", id)}
}

func (_c *UseCaseUser_GetUserById_Call) Run(run func(id uint)) *UseCaseUser_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UseCaseUser_GetUserById_Call) Return(_a0 entity.User, _a1 error) *UseCaseUser_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseUser_GetUserById_Call) RunAndReturn(run func(uint) (entity.User, error)) *UseCaseUser_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: _a0, id
func (_m *UseCaseUser) UpdateUser(_a0 user.UserParam, id uint) (interface{}, error) {
	ret := _m.Called(_a0, id)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(user.UserParam, uint) (interface{}, error)); ok {
		return rf(_a0, id)
	}
	if rf, ok := ret.Get(0).(func(user.UserParam, uint) interface{}); ok {
		r0 = rf(_a0, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(user.UserParam, uint) error); ok {
		r1 = rf(_a0, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseUser_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UseCaseUser_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - _a0 user.UserParam
//   - id uint
func (_e *UseCaseUser_Expecter) UpdateUser(_a0 interface{}, id interface{}) *UseCaseUser_UpdateUser_Call {
	return &UseCaseUser_UpdateUser_Call{Call: _e.mock.On("UpdateUser", _a0, id)}
}

func (_c *UseCaseUser_UpdateUser_Call) Run(run func(_a0 user.UserParam, id uint)) *UseCaseUser_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.UserParam), args[1].(uint))
	})
	return _c
}

func (_c *UseCaseUser_UpdateUser_Call) Return(_a0 interface{}, _a1 error) *UseCaseUser_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseUser_UpdateUser_Call) RunAndReturn(run func(user.UserParam, uint) (interface{}, error)) *UseCaseUser_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUseCaseUser creates a new instance of UseCaseUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCaseUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCaseUser {
	mock := &UseCaseUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
